<?php

namespace BackOfficeBundle\Repository;

use BackOfficeBundle\Entity\Ville;

/**
 * TrajetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrajetRepository extends \Doctrine\ORM\EntityRepository {
    
    public function getLastTrajets($nbOfTrajets) {
        if($nbOfTrajets < 1)
            return null;

        $em = $this->createQueryBuilder("t")
            ->orderBy("t.id", "DESC")
            ->setMaxResults($nbOfTrajets)
            ->getQuery();

        return $em->getResult();
    }

    public function countTrajets() {
        return $this->createQueryBuilder("t")
            ->select("COUNT(t.id)")
            ->getQuery()->getSingleScalarResult();
    }

    public function getTrajet($id) {
        $em = $this->createQueryBuilder("t")
            ->where("t.id = :id")
            ->setParameter("id", $id)
            ->getQuery();

        return $em->getOneOrNullResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

    public function getTrajets($trajet) {
        // Création de la requête
        $em = $this->createQueryBuilder("t");
        $em->select(["t", "villeD", "villeA", "typeT"]);

        // Ajout des jointures
        $em->innerJoin("t.villeDepart", "villeD");
        $em->innerJoin("t.villeArrivee", "villeA");
        $em->innerJoin("t.typeTrajet", "typeT");

        // Ajout des conditions
        // Permet d'utiliser "andWhere()" dans les prochaines requêtes sans avoir à vérifier s'il y a eu un "where()" avant
        $em->where("true = true");

        if($trajet->getHeureDepart())
            $em->andWhere("t.heureDepart BETWEEN :heureDepart_avant AND :heureDepart_apres");

        if($trajet->getDateDepart())
            $em->andWhere("t.dateDepart = :dateDepart");

        if($trajet->getVilleDepart())
            $em->andWhere("villeD = :villeDepart");

        if($trajet->getVilleArrivee())
            $em->andWhere("villeA = :villeArrivee");

        if($trajet->getTypeTrajet())
            $em->andWhere("typeT = :typeTrajet");

        // Ajout des paramètres
        if($trajet->getHeureDepart())
            $em->setParameters([
                // On récupère les trajets proposés entre 2h avant et 2h après l'heure demandée
                "heureDepart_avant" => $trajet->getHeureDepart()->sub(new \DateInterval("PT2H")),
                "heureDepart_apres" => $trajet->getHeureDepart()->add(new \DateInterval("PT2H"))
            ]);

        if($trajet->getDateDepart())
            $em->setParameter("dateDepart", $trajet->getDateDepart());

        if($trajet->getVilleDepart())
            $em->setParameter("villeDepart", $trajet->getVilleDepart());

        if($trajet->getVilleArrivee())
            $em->setParameter("villeArrivee", $trajet->getVilleArrivee());

        if($trajet->getTypeTrajet())
            $em->setParameter("typeTrajet", $trajet->getTypeTrajet());

        return $em->getQuery()->getArrayResult();
    }

}
