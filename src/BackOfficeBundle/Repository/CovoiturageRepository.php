<?php

namespace BackOfficeBundle\Repository;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

use BackOfficeBundle\Entity\Trajet;
use BackOfficeBundle\Entity\Utilisateur;

use \Datetime;

/**
 * CovoiturageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CovoiturageRepository extends \Doctrine\ORM\EntityRepository {

    public function getCo2EconomyByMonth() {
        $now = new DateTime(); 

        $co2SavedByMonth = [];

        for($i=1; $i<=12; $i++) {
            $query = $this->createQueryBuilder("covoit")
                ->select("sum(co2.valCo2)")
                ->innerJoin("covoit.co2", "co2")
                ->innerJoin("covoit.trajet", "trajet")
                ->innerJoin("trajet.typeTrajet", "type")
                ->where("type.typeTrajet = 'Ponctuel'")
                ->andWhere("trajet.dateDepart BETWEEN :start AND :end")
                ->andWhere("co2.actif = true")
                ->setParameter("start", $now->format("Y-$i-1"))
                ->setParameter("end", $now->format("Y-$i-t"))
                ->getQuery();

            $res = $query->getSingleScalarResult();

            if(!$res)
                $res = 0;

            array_push($co2SavedByMonth, number_format($res, 1));
        }

        return $co2SavedByMonth;
    }

    public function getCovoiturageOfTrajet($trajet) {
        $query = $this->createQueryBuilder("covoit")
            ->innerJoin("covoit.trajet", "trajet")
            ->where("trajet = :trajet")
            ->setParameter("trajet", $trajet)
            ->getQuery();

        return $query->getResult();
    }

    public function getTrajetsUtilisateur($id) {
        $em = $this->createQueryBuilder("covoit")
            ->innerJoin("covoit.trajet", "t")
            ->innerJoin("covoit.utilisateur", "u")
            ->where("u.id = :id")
            ->setParameter("id", $id)
            ->getQuery();

        return $em->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

}
